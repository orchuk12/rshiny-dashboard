geom_area(alpha = 0.6,
size = 1,
colour = "black",
stat = 'identity') +
theme_minimal() +
labs(title = "Area Plot of Weekly Earnings by Degree and Year",
x = "Year",
y = "Weekly Earning") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set1")
View(degree_pivot)
degree_pivot %>%
ggplot(aes(x = year, y = weekly_earning, fill = degree, group = degree)) +
geom_area(alpha = 0.6,
size = 1,
colour = "black",
stat = 'identity') +
theme_minimal() +
labs(title = "Area Plot of Weekly Earnings by Degree and Year",
x = "Year",
y = "Weekly Earning") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set1")
View(employee_earnings_tidy)
table(employee_earnings_tidy$level_of_highest_non_school_qualification)
table(employee_earnings_tidy$state_and_territory)
runApp()
table(employee_earnings_tidy$level_of_highest_non_school_qualification)
??purrr
qualification_levels <- unique(slide3_data1$level_of_highest_non_school_qualification)
slide3_data1 <- employee_earnings_tidy %>%
filter(classification == "Full-time or part-time status",
leave_entitlements == "Total employees",
level_of_highest_non_school_qualification == "Total")
slide3_data1 <- employee_earnings_tidy %>%
filter(classification == "Full-time or part-time status",
leave_entitlements == "Total employees")
View(slide3_data1)
slide3_data1 <- employee_earnings_tidy %>%
filter(classification == "Full-time or part-time status",
leave_entitlements == "Total employees") %>%
slide3_data1 <- slide3_data1[, c(2,6,13,19)]
slide3_data1 <- slide3_data1[, c(2,6,13,19)]
slide2_data1 <- employee_earnings_tidy %>%
filter(classification == "Full-time or part-time status",
leave_entitlements == "Total employees",
level_of_highest_non_school_qualification == "Total")
slide2_data1 <- slide2_data1[, c(2,6,13,19)]
View(slide2_data2)
View(slide2_data1)
slide3_data1 <- employee_earnings_tidy %>%
filter(classification == "Full-time or part-time status",
leave_entitlements == "Total employees")
slide3_data1 <- slide3_data1[, c(2,4,6,13,19)]
table(employee_earnings_tidy$level_of_highest_non_school_qualification)
slide3_data1_years <- rep(2014:2023, each = 180)
slide3_data1$year <- slide3_data1_years
slide3_data1 <- slide3_data1[, c(6, 1:5)]
slide3_data1 <- slide3_data1 %>%
rename("male" = male_median_weekly_earnings) %>%
rename("female" = female_median_weekly_earnings)
slide3_data1 <- slide3_data1 %>%
pivot_longer(cols = -c(year,
category,
state_and_territory,
level_of_highest_non_school_qualification),
names_to = "gender",
values_to = "weekly_income")
slide3_data1
states <- unique(slide3_data1$state_and_territory)
# Create a named list of filtered data frames for each state
state_data_list <- split(slide3_data1, slide3_data1$state_and_territory)
# The list now contains individual data frames for each state
# To access the subsets, you can use the names or indices
# Example: Accessing the subset for "Australia"
australia_data <- state_data_list[["Australia"]]
# To verify the result
print(state_data_list)
View(australia_data)
# To verify the result
print(state_data_list[["Victoria"]])
state_data_list[["Victoria"]] %>%
ggplot(aes(x = gender, y = weekly_income, fill = category)) +
geom_col()
#Print coefficients and p-values
print(coefficients)
print(p_values)
library(purrr)
library(broom)
fit_lm_extract <- function(data) {
lm_data1 <- data %>% filter(category == "Full-time")
if(nrow(lm_data1) > 0) {  # Ensure there's data to model
lm_model <- lm(weekly_income ~ level_of_highest_non_school_qualification, data = lm_data)
tidy_model <- tidy(lm_model)
# Select and rename relevant columns
tidy_model %>%
select(term, estimate, p.value) %>%
rename(
education_type = term,
coefficient = estimate,
pvalue = p.value
)
} else {
# Return an empty data frame if there are no full-time entries
data.frame(education_type = character(),
coefficient = numeric(),
pvalue = numeric())
}
}
# Apply the function to each state and store the results in a named list
results_list <- map(state_data_list, fit_lm_extract)
View(state_data_list)
print(colnames(state_data_list[[1]]))
# Apply the function to each state and store the results in a named list
results_list <- map(state_data_list, fit_lm_extract)
slide3_data1
lm_data1 <- slide3_data1 %>%
filter(category == "Full-time")
# Step 2: Split the data by state
state_data_list <- split(lm_data1, lm_data1$state_and_territory)
# Step 3: Function to fit the linear model and extract coefficients and p-values
fit_lm_extract <- function(data) {
lm_model <- lm(weekly_income ~ level_of_highest_non_school_qualification, data = data)
tidy_model <- tidy(lm_model)
# Select and rename relevant columns
tidy_model %>%
select(term, estimate, p.value) %>%
rename(
education_type = term,
coefficient = estimate,
pvalue = p.value
)
}
# Step 4: Apply the function to each state and add a column for state name
results <- map_dfr(names(state_data_list), function(state) {
state_data <- state_data_list[[state]]
state_results <- fit_lm_extract(state_data)
state_results %>%
mutate(state = state)
})
# Step 5: Print the final combined results
print(results)
View(results)
write.xlsx(results, "data_clean/lm_model_full_time.xlsx")
lm_data1 <- slide3_data1 %>%
filter(category == "Part-time")
# Step 2: Split the data by state
state_data_list <- split(lm_data1, lm_data1$state_and_territory)
# Step 3: Function to fit the linear model and extract coefficients and p-values
fit_lm_extract <- function(data) {
lm_model <- lm(weekly_income ~ level_of_highest_non_school_qualification, data = data)
tidy_model <- tidy(lm_model)
# Select and rename relevant columns
tidy_model %>%
select(term, estimate, p.value) %>%
rename(
education_type = term,
coefficient = estimate,
pvalue = p.value
)
}
# Step 4: Apply the function to each state and add a column for state name
results <- map_dfr(names(state_data_list), function(state) {
state_data <- state_data_list[[state]]
state_results <- fit_lm_extract(state_data)
state_results %>%
mutate(state = state)
})
# Step 5: Print the final combined results
print(results)
write.xlsx(results, "data_clean/lm_model_part_time.xlsx")
lm_part_time <- read.xlsx("data_clean/lm_model_part_time.xlsx")
lm_full_time <- read.xlsx("data_clean/lm_model_full_time.xlsx")
head(lm_full_time)
results
results <- results %>%
mutate(education_type = str_trim(sub("level_of_highest_non_school_qualification", "", education_type)))
View(results)
write.xlsx(results, "data_clean/lm_model_part_time.xlsx")
lm_data1 <- slide3_data1 %>%
filter(category == "Full-time")
# Step 2: Split the data by state
state_data_list <- split(lm_data1, lm_data1$state_and_territory)
# Step 3: Function to fit the linear model and extract coefficients and p-values
fit_lm_extract <- function(data) {
lm_model <- lm(weekly_income ~ level_of_highest_non_school_qualification, data = data)
tidy_model <- tidy(lm_model)
# Select and rename relevant columns
tidy_model %>%
select(term, estimate, p.value) %>%
rename(
education_type = term,
coefficient = estimate,
pvalue = p.value
)
}
# Step 4: Apply the function to each state and add a column for state name
results <- map_dfr(names(state_data_list), function(state) {
state_data <- state_data_list[[state]]
state_results <- fit_lm_extract(state_data)
state_results %>%
mutate(state = state)
})
# Step 5: Print the final combined results
results <- results %>%
mutate(education_type = str_trim(sub("level_of_highest_non_school_qualification", "", education_type)))
print(results)
# Download
write.xlsx(results, "data_clean/lm_model_full_time.xlsx")
lm_part_time <- read.xlsx("data_clean/lm_model_part_time.xlsx")
lm_full_time <- read.xlsx("data_clean/lm_model_full_time.xlsx")
head(lm_full_time)
head(lm_part_time)
library(kableExtra)
runApp()
lm_full_time %>%
filter(state == "Victoria") %>%
select(-state) %>%
kable(caption = "abc", state) %>%
row_spec(0, background = "white")
lm_full_time %>%
filter(state == "Victoria") %>%
kable(caption = "abc", state) %>%
row_spec(0, background = "white")
head(lm_part_time)
table(lm_full_time$state)
lm_full_time %>%
filter(state == "Victoria")
lm_full_time %>%
filter(state == "Victoria") %>%
kable(caption = "abc") %>%
row_spec(0, background = "white")
lm_full_time %>%
filter(state == "Victoria") %>%
kable(caption = paste("abc", state)) %>%
row_spec(0, background = "white")
lm_full_time %>%
filter(state == "Victoria") %>%
kable(caption = paste("abc")) %>%
row_spec(0, background = "white")
lm_full_time %>%
filter(state == "Victoria") %>%
kable(caption = paste("abc", state[1])) %>%
row_spec(0, background = "white")
lm_full_time %>%
filter(state == "Victoria") %>%
kable(caption = paste("Linear Regression Model for Victoria")) %>%
row_spec(0, background = "white")
lm_full_time
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(state_data_list)
state_data_list[["Victoria"]]
state_data_list[["Victoria"]] %>%
ggplot(aes(x = gender, y = weekly_income, fill = category)) +
geom_col()
state_data_list[["Victoria"]]
state_data_list[["Victoria"]] %>%
ggplot(aes(x = year, y = weekly_income, color = category)) +
geom_line()
state_data_list[["Victoria"]]
chunk38 <- state_data_list[["Victoria"]]
table(chunk38$category)
table(chunk38$state_and_territory)
View(slide3_data1)
states
state_data_list
?split
View(chunk38)
print(table(slide3_data1$state_and_territory, slide3_data1$category))
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, color = category)) +
geom_line()
state_data_list$Victoria
state_data_list$Victoria$category
print(table(state_data_list$`Victoria`$category))
print(unique(slide3_data1$category))
print(table(slide3_data1$category))
head(slide3_data1)
str(slide3_data1)
print(unique(slide3_data1$category))
print(table(slide3_data1$category))
print(table(slide3_data1$state_and_territory, slide3_data1$category))
print(str(slide3_data1))
print(head(slide3_data1))
slide3_data1 <- employee_earnings_tidy %>%
filter(classification == "Full-time or part-time status",
leave_entitlements == "Total employees")
slide3_data1 <- slide3_data1[, c(2,4,6,13,19)]
slide3_data1_years <- rep(2014:2023, each = 180)
slide3_data1$year <- slide3_data1_years
slide3_data1 <- slide3_data1[, c(6, 1:5)]
slide3_data1 <- slide3_data1 %>%
rename("male" = male_median_weekly_earnings) %>%
rename("female" = female_median_weekly_earnings)
slide3_data1 <- slide3_data1 %>%
pivot_longer(cols = -c(year,
category,
state_and_territory,
level_of_highest_non_school_qualification),
names_to = "gender",
values_to = "weekly_income")
states <- unique(slide3_data1$state_and_territory)
state_data_list <- split(slide3_data1, slide3_data1$state_and_territory)
state_data_list
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, color = category)) +
geom_line()
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, color = level_of_highest_non_school_qualification)) +
geom_line()
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, color = level_of_highest_non_school_qualification)) +
geom_boxplot()
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, fill = level_of_highest_non_school_qualification)) +
geom_boxplot()
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, fill = level_of_highest_non_school_qualification)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1)
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, fill = level_of_highest_non_school_qualification)) +
geom_violin(trim = FALSE)
View(tooltip_data_unemp)
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, fill = level_of_highest_non_school_qualification)) +
geom_violin(trim = FALSE) +
theme_bw()
state_data_list %>%
ggplot(aes(x = year, y = weekly_income, fill = level_of_highest_non_school_qualification)) +
geom_violin(trim = FALSE) +
theme_bw() +
scale
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, fill = level_of_highest_non_school_qualification)) +
geom_violin(trim = FALSE) +
theme_bw()
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, fill = level_of_highest_non_school_qualification)) +
geom_violin(trim = FALSE) +
theme_bw() +
scale_x_continuous(breaks = seq(2014, 2023, by = 1))
summary(state_data_list$Victoria$weekly_income)
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, fill = level_of_highest_non_school_qualification)) +
geom_violin(trim = FALSE, scale = "width") +
theme_bw() +
scale_x_continuous(breaks = seq(2014, 2023, by = 1))
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, fill = level_of_highest_non_school_qualification)) +
geom_violin(trim = FALSE, scale = "width") +
theme_bw() +
scale_x_continuous(breaks = seq(2014, 2023, by = 1)) +
ylim(0, max(slide3_data1$weekly_income)) # Clip the y-axis directly
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, fill = level_of_highest_non_school_qualification)) +
geom_violin(trim = FALSE, scale = "width") +
theme_bw() +
scale_x_continuous(breaks = seq(2014, 2023, by = 1))
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, fill = level_of_highest_non_school_qualification)) +
geom_violin(trim = FALSE, scale = "width") +
theme_bw() +
scale_x_continuous(breaks = seq(2014, 2023, by = 1)) +
scale_y_continuous(breaks = seq(
min(slide3_data1$weekly_income),
max(slide3_data1$weekly_income),
by = 500))
runApp()
runApp()
runApp()
runApp()
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, fill = level_of_highest_non_school_qualification)) +
geom_violin(trim = FALSE, scale = "width") +
theme_bw() +
scale_x_continuous(breaks = seq(2014, 2023, by = 1)) +
scale_y_continuous(breaks = seq(
min(slide3_data1$weekly_income),
max(slide3_data1$weekly_income),
by = 500)) +
labs(title = paste("Violin Plot of Income Distribution by Education Type in ",
state_data_list$Victoria$state_and_territory),
x = "Year",
y = "Weekly Income",
fill = "Education Type")
state_data_list$Victoria %>%
ggplot(aes(x = year, y = weekly_income, fill = level_of_highest_non_school_qualification)) +
geom_violin(trim = FALSE, scale = "width") +
theme_bw() +
scale_x_continuous(breaks = seq(2014, 2023, by = 1)) +
scale_y_continuous(breaks = seq(
min(slide3_data1$weekly_income),
max(slide3_data1$weekly_income),
by = 500)) +
labs(title = paste("Violin Plot of Income Distribution by Education Type in",
state_data_list$Victoria$state_and_territory),
x = "Year",
y = "Weekly Income",
fill = "Education Type")
View(slide3_data1)
write.xlsx(slide3_data1, "data_clean/state_data.xlsx")
state_data <- read.xlsx("data_clean/state_data.xlsx")
View(degree_pivot)
runApp()
state_data
head(state_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?shiny::radioButtons()
shiny::runApp()
runApp()
runApp()
runApp()
